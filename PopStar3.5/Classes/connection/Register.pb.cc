// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Register.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Register.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RegisterMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Register_2eproto() {
  protobuf_AddDesc_Register_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Register.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterMsg_descriptor_ = file->message_type(0);
  static const int RegisterMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, msgbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, telephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, idcard_),
  };
  RegisterMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterMsg_descriptor_,
      RegisterMsg::default_instance_,
      RegisterMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Register_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterMsg_descriptor_, &RegisterMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Register_2eproto() {
  delete RegisterMsg::default_instance_;
  delete RegisterMsg_reflection_;
}

void protobuf_AddDesc_Register_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_MessageBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Register.proto\032\021MessageBase.proto\"\232\001\n\013"
    "RegisterMsg\022\035\n\007msgbase\030\001 \002(\0132\014.MessageBa"
    "se\022\017\n\007account\030\002 \002(\t\022\020\n\010password\030\003 \002(\t\022\014\n"
    "\004name\030\004 \001(\t\022\013\n\003age\030\005 \001(\005\022\013\n\003sex\030\006 \001(\005\022\021\n"
    "\ttelephone\030\007 \001(\t\022\016\n\006idcard\030\010 \001(\tB)\n\025com."
    "meteor.minaserverB\020RegisterProtoBuf", 235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Register.proto", &protobuf_RegisterTypes);
  RegisterMsg::default_instance_ = new RegisterMsg();
  RegisterMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Register_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Register_2eproto {
  StaticDescriptorInitializer_Register_2eproto() {
    protobuf_AddDesc_Register_2eproto();
  }
} static_descriptor_initializer_Register_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RegisterMsg::kMsgbaseFieldNumber;
const int RegisterMsg::kAccountFieldNumber;
const int RegisterMsg::kPasswordFieldNumber;
const int RegisterMsg::kNameFieldNumber;
const int RegisterMsg::kAgeFieldNumber;
const int RegisterMsg::kSexFieldNumber;
const int RegisterMsg::kTelephoneFieldNumber;
const int RegisterMsg::kIdcardFieldNumber;
#endif  // !_MSC_VER

RegisterMsg::RegisterMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterMsg)
}

void RegisterMsg::InitAsDefaultInstance() {
  msgbase_ = const_cast< ::MessageBase*>(&::MessageBase::default_instance());
}

RegisterMsg::RegisterMsg(const RegisterMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RegisterMsg)
}

void RegisterMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgbase_ = NULL;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_ = 0;
  sex_ = 0;
  telephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterMsg::~RegisterMsg() {
  // @@protoc_insertion_point(destructor:RegisterMsg)
  SharedDtor();
}

void RegisterMsg::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (telephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete telephone_;
  }
  if (idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idcard_;
  }
  if (this != default_instance_) {
    delete msgbase_;
  }
}

void RegisterMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterMsg_descriptor_;
}

const RegisterMsg& RegisterMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Register_2eproto();
  return *default_instance_;
}

RegisterMsg* RegisterMsg::default_instance_ = NULL;

RegisterMsg* RegisterMsg::New() const {
  return new RegisterMsg;
}

void RegisterMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegisterMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(age_, sex_);
    if (has_msgbase()) {
      if (msgbase_ != NULL) msgbase_->::MessageBase::Clear();
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_telephone()) {
      if (telephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        telephone_->clear();
      }
    }
    if (has_idcard()) {
      if (idcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        idcard_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MessageBase msgbase = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgbase()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required string account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_age;
        break;
      }

      // optional int32 age = 5;
      case 5: {
        if (tag == 40) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional int32 sex = 6;
      case 6: {
        if (tag == 48) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_telephone;
        break;
      }

      // optional string telephone = 7;
      case 7: {
        if (tag == 58) {
         parse_telephone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_telephone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->telephone().data(), this->telephone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "telephone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_idcard;
        break;
      }

      // optional string idcard = 8;
      case 8: {
        if (tag == 66) {
         parse_idcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idcard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idcard().data(), this->idcard().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "idcard");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterMsg)
  return false;
#undef DO_
}

void RegisterMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterMsg)
  // required .MessageBase msgbase = 1;
  if (has_msgbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msgbase(), output);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional int32 age = 5;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->age(), output);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // optional string telephone = 7;
  if (has_telephone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->telephone().data(), this->telephone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "telephone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->telephone(), output);
  }

  // optional string idcard = 8;
  if (has_idcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idcard().data(), this->idcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idcard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->idcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegisterMsg)
}

::google::protobuf::uint8* RegisterMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterMsg)
  // required .MessageBase msgbase = 1;
  if (has_msgbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msgbase(), target);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 age = 5;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->age(), target);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // optional string telephone = 7;
  if (has_telephone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->telephone().data(), this->telephone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "telephone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->telephone(), target);
  }

  // optional string idcard = 8;
  if (has_idcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idcard().data(), this->idcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idcard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->idcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterMsg)
  return target;
}

int RegisterMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MessageBase msgbase = 1;
    if (has_msgbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgbase());
    }

    // required string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 age = 5;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string telephone = 7;
    if (has_telephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->telephone());
    }

    // optional string idcard = 8;
    if (has_idcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idcard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterMsg::MergeFrom(const RegisterMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgbase()) {
      mutable_msgbase()->::MessageBase::MergeFrom(from.msgbase());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_telephone()) {
      set_telephone(from.telephone());
    }
    if (from.has_idcard()) {
      set_idcard(from.idcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterMsg::CopyFrom(const RegisterMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_msgbase()) {
    if (!this->msgbase().IsInitialized()) return false;
  }
  return true;
}

void RegisterMsg::Swap(RegisterMsg* other) {
  if (other != this) {
    std::swap(msgbase_, other->msgbase_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(name_, other->name_);
    std::swap(age_, other->age_);
    std::swap(sex_, other->sex_);
    std::swap(telephone_, other->telephone_);
    std::swap(idcard_, other->idcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterMsg_descriptor_;
  metadata.reflection = RegisterMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
